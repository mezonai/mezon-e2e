name: Verify Automation Test Results

on:
  workflow_dispatch:
    inputs:
      mezon_repo:
        description: "Mezon repository to use (mezonai/mezon.git or kientrinh-dev/mezon.git)"
        required: true
        default: "mezonai/mezon.git"
        options:
          - "mezonai/mezon.git"
          - "kientrinh-dev/mezon.git"
        type: choice
      test_suite:
        description: "Test suite to run (choose from list or leave blank for all)"
        required: false
        default: "all"
        type: choice
        options:
          - "all"
          - "standalone"
          - "channel-management"
          - "channel-message-2"
          - "channel-message-3"
          - "channel-message-4"
          - "channel-message-5"
          - "clan-management"
          - "direct-message"
          - "dual-chat-in-clan"
          - "onboarding-guide"
          - "thread-management"
          - "upload-file"
          - "user-profile"

jobs:
  verify-automation-tests:
    runs-on: mezon-e2e
    steps:
      - name: Checkout mezon-e2e repository
        uses: actions/checkout@v4
        with:
          path: mezon-e2e

      - name: Checkout mezon repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.mezon_repo || 'kientrinh-dev/mezon.git' }}
          ref: develop
          path: mezon

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Yarn
        run: |
          echo "üì¶ Installing Yarn globally..."
          npm install -g yarn
          echo "‚úÖ Yarn installed successfully"
          echo "üìã Yarn version: $(yarn --version)"

      - name: Install dependencies in parallel
        run: |
          echo "üöÄ Installing dependencies in parallel..."

          # Function to install mezon dependencies
          install_mezon() {
            cd ./mezon
            echo "Installing mezon dependencies..."
            sed -i.bak '/\"mezon-active-windows\":/d' package.json
            yarn install
            echo "‚úÖ Mezon dependencies installed"
          }

          # Function to install e2e dependencies and browsers
          install_e2e() {
            cd ./mezon-e2e
            echo "Installing mezon-e2e dependencies..."
            yarn install
            echo "Installing Playwright browsers..."
            npx playwright install chromium
            echo "‚úÖ E2E dependencies and browsers installed"
          }

          # Run both installations in parallel
          install_mezon &
          MEZON_PID=$!
          install_e2e &
          E2E_PID=$!

          # Wait for both to complete
          wait $MEZON_PID
          MEZON_EXIT=$?
          wait $E2E_PID
          E2E_EXIT=$?

          # Check if both succeeded
          if [ $MEZON_EXIT -eq 0 ] && [ $E2E_EXIT -eq 0 ]; then
            echo "üéâ All dependencies installed successfully!"
          else
            echo "‚ùå Dependency installation failed!"
            echo "Mezon exit code: $MEZON_EXIT"
            echo "E2E exit code: $E2E_EXIT"
            exit 1
          fi

      - name: Start mezon dev server
        working-directory: ./mezon
        run: |
          echo "üöÄ Starting mezon dev server on port 4200..."
          echo "üìã Current directory: $(pwd)"
          echo "üìÅ Directory contents:"
          ls -la
          echo "üîç Checking if nx command exists:"
          which nx || npx nx --version
          echo "üì¶ Node and npm versions:"
          node --version
          npm --version
          yarn --version
          echo "üåê Checking if port 4200 is available:"
          netstat -tuln | grep ":4200" || echo "Port 4200 is available"

          echo "üèÉ Starting server..."
          nohup npx nx run chat:serve --host=127.0.0.1 --port=4200 > mezon-dev.log 2>&1 &
          SERVER_PID=$!
          echo $SERVER_PID > mezon-dev.pid
          echo "üìã Server PID: $SERVER_PID"

          echo "‚è±Ô∏è Waiting 10 seconds for initial startup..."
          sleep 10

          echo "üìú Initial server log output:"
          head -50 mezon-dev.log || echo "No log file yet"

          echo "üîç Checking if process is still running:"
          if ps -p $SERVER_PID > /dev/null; then
            echo "‚úÖ Server process is running (PID: $SERVER_PID)"
          else
            echo "‚ùå Server process died! Full log:"
            cat mezon-dev.log || echo "No log file found"
            exit 1
          fi

      - name: Wait for mezon server to be ready
        run: |
          echo "‚è≥ Waiting for mezon server to be ready on port 4200..."

          # Check if PID file exists
          if [ ! -f ./mezon/mezon-dev.pid ]; then
            echo "‚ùå PID file not found!"
            exit 1
          fi

          SERVER_PID=$(cat ./mezon/mezon-dev.pid)
          echo "üìã Server PID from file: $SERVER_PID"

          # Check if process is running
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "‚ùå Server process is not running! Checking logs..."
            echo "üìú Full server log:"
            cat ./mezon/mezon-dev.log || echo "No log file found"
            exit 1
          fi

      - name: Create environment file
        working-directory: ./mezon-e2e
        run: |
          cat > .env << EOF
          BASE_URL=http://localhost:4200/
          SKIP_LOGIN=true
          WORKERS=6
          CI=true
          EOF

      - name: Run automation tests
        id: run-tests
        working-directory: ./mezon-e2e
        run: |

          echo "üß™ Starting automation tests..."
          echo "üìä Environment file content:"
          cat .env
          echo ""
          echo "üöÄ Running tests with yarn test..."

          set +e  
          xvfb-run yarn test:${{ github.event.inputs.test_suite || 'all' }}
          TEST_EXIT_CODE=$?
          set -e 

          echo "üìä Test exit code: $TEST_EXIT_CODE"

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ All tests passed"
            echo "test-result=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some tests failed (exit code: $TEST_EXIT_CODE)"
            echo "test-result=failed" >> $GITHUB_OUTPUT
          fi

          echo "üîÑ Continuing pipeline for cleanup and reporting..."
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: mezon-e2e/playwright-report/
          retention-days: 7

      - name: Stop mezon dev server
        if: always()
        run: |
          echo "üõë Stopping mezon dev server..."

          # Kill the server process if PID file exists
          if [ -f ./mezon/mezon-dev.pid ]; then
            SERVER_PID=$(cat ./mezon/mezon-dev.pid)
            echo "üìã Found server PID: $SERVER_PID"
            
            if ps -p $SERVER_PID > /dev/null; then
              echo "üîÑ Killing server process..."
              kill $SERVER_PID
              sleep 2
              
              # Force kill if still running
              if ps -p $SERVER_PID > /dev/null; then
                echo "üî® Force killing server process..."
                kill -9 $SERVER_PID
              fi
              echo "‚úÖ Server process stopped"
            else
              echo "‚ÑπÔ∏è Server process already stopped"
            fi
            
            rm -f ./mezon/mezon-dev.pid
          else
            echo "‚ÑπÔ∏è No PID file found"
          fi

          # Also kill any remaining processes on port 4200
          echo "üîç Checking for any remaining processes on port 4200..."
          REMAINING_PIDS=$(lsof -ti:4200 || true)
          if [ -n "$REMAINING_PIDS" ]; then
            echo "üî® Killing remaining processes on port 4200: $REMAINING_PIDS"
            kill -9 $REMAINING_PIDS || true
          else
            echo "‚úÖ No processes found on port 4200"
          fi

      - name: Check test results and fail pipeline if needed
        if: always()
        run: |
          if [ "${{ steps.run-tests.outputs.test-result }}" == "failed" ]; then
            echo "‚ùå Pipeline failed due to test failures"
            echo "üìä Test results have been uploaded for analysis"
            exit 1
          else
            echo "‚úÖ Pipeline completed successfully"
          fi
