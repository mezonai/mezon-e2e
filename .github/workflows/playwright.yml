name: Verify Automation Test Results

on:
  workflow_dispatch:
    inputs:
      mezon_repo:
        description: 'Mezon repository to use (mezonai/mezon.git or kientrinh-dev/mezon.git)'
        required: true
        default: 'mezonai/mezon.git'
      test_suite:
        description: 'Test suite to run (choose from list or leave blank for all)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'standalone'
          - 'channel-management'
          - 'channel-message-2'
          - 'channel-message-3'
          - 'channel-message-4'
          - 'channel-message-5'
          - 'clan-management'
          - 'direct-message'
          - 'dual-chat-in-clan'
          - 'onboarding-guide'
          - 'thread-management'
          - 'upload-file'
          - 'user-profile'

jobs:
  verify-automation-tests:
    runs-on: mezon-e2e
    steps:
      - name: Checkout mezon-e2e repository
        uses: actions/checkout@v4
        with:
          path: mezon-e2e

      - name: Checkout mezon repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.inputs.mezon_repo || 'kientrinh-dev/mezon.git' }}
          ref: develop
          path: mezon

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: |
            mezon/yarn.lock
            mezon-e2e/yarn.lock

      - name: Cache system dependencies
        uses: actions/cache@v4
        id: system-cache
        with:
          path: |
            /var/cache/apt
            /var/lib/apt/lists
          key: ${{ runner.os }}-system-deps-${{ hashFiles('.github/workflows/playwright.yml') }}
          restore-keys: |
            ${{ runner.os }}-system-deps-

      - name: Install system dependencies
        if: steps.system-cache.outputs.cache-hit != 'true'
        run: |
          echo "🏗️ Installing system dependencies (cache miss)..."
          # Install system dependencies
          sudo apt update
          sudo apt install -y libx11-dev libxss-dev libxext-dev
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt-get update
          sudo apt-get install -y python3.9 python3.9-dev python3.9-distutils
          echo "✅ System dependencies installed"

      - name: Setup Python symlink
        run: |
          if [ "${{ steps.system-cache.outputs.cache-hit }}" == "true" ]; then
            echo "🚀 Using cached system dependencies"
          fi
          # Create symlinks for easier access (always needed as they don't persist in cache)
          sudo ln -sf /usr/bin/python3.9 /usr/local/bin/python3.9
          echo "Python 3.9 installed at: $(which python3.9)"
          python3.9 --version

      - name: Install dependencies in parallel
        run: |
          echo "🚀 Installing dependencies in parallel..."

          # Function to install mezon dependencies
          install_mezon() {
            cd ./mezon
            echo "Installing mezon dependencies..."
            # Set Python 3.9 for node-gyp (similar to your local setup)
            export NODE_GYP_FORCE_PYTHON="/usr/bin/python3.9"
            export python="/usr/bin/python3.9"
            echo "Using Python: $python"
            echo "NODE_GYP_FORCE_PYTHON: $NODE_GYP_FORCE_PYTHON"
            # Verify Python version
            $python --version
            # Install dependencies
            yarn install
            echo "✅ Mezon dependencies installed"
          }

          # Function to install e2e dependencies and browsers
          install_e2e() {
            cd ./mezon-e2e
            echo "Installing mezon-e2e dependencies..."
            yarn install
            echo "Installing Playwright browsers..."
            npx playwright install chromium
            echo "✅ E2E dependencies and browsers installed"
          }

          # Run both installations in parallel
          install_mezon &
          MEZON_PID=$!
          install_e2e &
          E2E_PID=$!

          # Wait for both to complete
          wait $MEZON_PID
          MEZON_EXIT=$?
          wait $E2E_PID
          E2E_EXIT=$?

          # Check if both succeeded
          if [ $MEZON_EXIT -eq 0 ] && [ $E2E_EXIT -eq 0 ]; then
            echo "🎉 All dependencies installed successfully!"
          else
            echo "❌ Dependency installation failed!"
            echo "Mezon exit code: $MEZON_EXIT"
            echo "E2E exit code: $E2E_EXIT"
            exit 1
          fi

      - name: Start mezon dev server
        working-directory: ./mezon
        run: |
          echo "🚀 Starting mezon dev server on port 4200..."
          echo "📋 Current directory: $(pwd)"
          echo "📁 Directory contents:"
          ls -la
          echo "🔍 Checking if nx command exists:"
          which nx || npx nx --version
          echo "📦 Node and npm versions:"
          node --version
          npm --version
          yarn --version
          echo "🌐 Checking if port 4200 is available:"
          netstat -tuln | grep ":4200" || echo "Port 4200 is available"

          echo "🏃 Starting server..."
          nohup npx nx run chat:serve --host=127.0.0.1 --port=4200 > mezon-dev.log 2>&1 &
          SERVER_PID=$!
          echo $SERVER_PID > mezon-dev.pid
          echo "📋 Server PID: $SERVER_PID"

          echo "⏱️ Waiting 10 seconds for initial startup..."
          sleep 10

          echo "📜 Initial server log output:"
          head -50 mezon-dev.log || echo "No log file yet"

          echo "🔍 Checking if process is still running:"
          if ps -p $SERVER_PID > /dev/null; then
            echo "✅ Server process is running (PID: $SERVER_PID)"
          else
            echo "❌ Server process died! Full log:"
            cat mezon-dev.log || echo "No log file found"
            exit 1
          fi

      - name: Wait for mezon server to be ready
        run: |
          echo "⏳ Waiting for mezon server to be ready on port 4200..."

          # Check if PID file exists
          if [ ! -f ./mezon/mezon-dev.pid ]; then
            echo "❌ PID file not found!"
            exit 1
          fi

          SERVER_PID=$(cat ./mezon/mezon-dev.pid)
          echo "📋 Server PID from file: $SERVER_PID"

          # Check if process is running
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "❌ Server process is not running! Checking logs..."
            echo "📜 Full server log:"
            cat ./mezon/mezon-dev.log || echo "No log file found"
            exit 1
          fi

      - name: Create environment file
        working-directory: ./mezon-e2e
        run: |
          cat > .env << EOF
          BASE_URL=http://localhost:4200/
          SKIP_LOGIN=true
          WORKERS=4
          CI=true
          EOF

      - name: Run automation tests
        id: run-tests
        working-directory: ./mezon-e2e
        run: |

          echo "🧪 Starting automation tests..."
          echo "📊 Environment file content:"
          cat .env
          echo ""
          echo "🚀 Running tests with yarn test..."

          set +e  
          xvfb-run yarn test:${{ github.event.inputs.test_suite || 'all' }}
          TEST_EXIT_CODE=$?
          set -e 

          echo "📊 Test exit code: $TEST_EXIT_CODE"

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "✅ All tests passed"
            echo "test-result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Some tests failed (exit code: $TEST_EXIT_CODE)"
            echo "test-result=failed" >> $GITHUB_OUTPUT
          fi

          echo "🔄 Continuing pipeline for cleanup and reporting..."
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: mezon-e2e/playwright-report/
          retention-days: 7

      - name: Check test results and fail pipeline if needed
        if: always()
        run: |
          if [ "${{ steps.run-tests.outputs.test-result }}" == "failed" ]; then
            echo "❌ Pipeline failed due to test failures"
            echo "📊 Test results have been uploaded for analysis"
            exit 1
          else
            echo "✅ Pipeline completed successfully"
          fi
